Folder: D:\PenguinIsleProject\Penguin Isles\scripts\scr_camera_easing
File: scr_camera_easing.gml
/// Easing function for smooth camera transitions
function easing_out_quad(t) {
    return t * (2 - t);
}
Folder: D:\PenguinIsleProject\Penguin Isles\scripts\scr_convert_gui_to_world
File: scr_convert_gui_to_world.gml
/// scr_convert_gui_to_world()
/// Converts GUI mouse coordinates to world coordinates
var world_x = camera_get_view_x(view_camera[0]) + (mouse_x / display_get_gui_width()) * camera_get_view_width(view_camera[0]);
var world_y = camera_get_view_y(view_camera[0]) + (mouse_y / display_get_gui_height()) * camera_get_view_height(view_camera[0]);

return [world_x, world_y];

Folder: D:\PenguinIsleProject\Penguin Isles\scripts\scr_handle_collision
File: scr_handle_collision.gml
/// @function handle_collision
/// @param axis - "x" or "y" (direction to check)
/// @param speed - how far to move in that direction
/// @returns - the adjusted speed after collision check

function handle_collision(axis, speed) {
    var sign_speed = sign(speed); // Get direction (1 = right/down, -1 = left/up)
    var abs_speed = abs(speed);   // Get absolute movement amount
    var step_size; // Used for progressive movement

    while (abs_speed > 0) {
        step_size = min(abs_speed, 1); // Move in small steps (pixel by pixel)

        // Check collision at next sub-step
        if (axis == "x") {
            if (!place_meeting(x + step_size * sign_speed, y, obj_wall)) {
                x += step_size * sign_speed;
            } else {
                return 0; // Stop movement on collision
            }
        } else if (axis == "y") {
            if (!place_meeting(x, y + step_size * sign_speed, obj_wall)) {
                y += step_size * sign_speed;
            } else {
                return 0; // Stop movement on collision
            }
        }

        abs_speed -= step_size; // Reduce remaining movement
    }

    return speed; // Return remaining movement
}

Folder: D:\PenguinIsleProject\Penguin Isles\scripts\scr_init_sprites
File: scr_init_sprites.gml
function init_sprites(right, up, left, down, up_right, up_left, down_right, down_left) {
    sprite[RIGHT] = right;
    sprite[UP] = up;
    sprite[LEFT] = left;
    sprite[DOWN] = down;
    sprite[UP_RIGHT] = up_right;
    sprite[UP_LEFT] = up_left;
    sprite[DOWN_RIGHT] = down_right;
    sprite[DOWN_LEFT] = down_left;
}
Folder: D:\PenguinIsleProject\Penguin Isles\scripts\scr_macros
File: scr_macros.gml
#macro RIGHT 0
#macro UP 1
#macro LEFT 2
#macro DOWN 3
#macro UP_RIGHT 4
#macro UP_LEFT 5
#macro DOWN_RIGHT 6
#macro DOWN_LEFT 7
Folder: D:\PenguinIsleProject\Penguin Isles\scripts\scr_music_function
File: scr_music_function.gml
function set_song_ingame( _song, _fadeOutCurrentSong = 0, _fadeIn = 0 )
{
	//_song = set to any song (including "noone" to stop or fade the track out)
	//_fadeOutCurrentSong = time (in frames) the current song (if playing) will take to fade out
	//_fadeIn = time (in frames) the target song (if not "noone" will take to fade in

	with ( obj_musicmanager )
	{
		targetSongAsset = _song;
		endFadeOutTime = _fadeOutCurrentSong;
		startFadeInTime = _fadeIn;
	}
}
Folder: D:\PenguinIsleProject\Penguin Isles\scripts\scr_room_state
File: scr_room_state.gml
// Define save_room_state function
function save_room_state(room_id) {
    var state_list;
    if (ds_map_exists(global.room_states, room_id)) {
        var old_list = ds_map_find_value(global.room_states, room_id);
        ds_list_destroy(old_list); // Destroy the old list to prevent memory leaks
    }
    state_list = ds_list_create();
    ds_map_replace(global.room_states, room_id, state_list);

    with (all) {
    if (variable_instance_exists(id, "is_savable") && is_savable && object_index != obj_player && object_index != obj_player_tube /* add other player objects */) {
        // Save state as before
        var state = {
            object_index: object_index,
            x: x,
            y: y,
            direction: variable_instance_exists(id, "face") ? face : 0
        };
        // Rest of the saving logic

            // Save additional properties for specific objects
            if (object_index == obj_icetruck) {
                state.repair_required = repair_required;
                state.is_driveable = is_driveable;
            } else if (object_index == obj_icetruck_broken) {
                state.repair_required = repair_required;
                state.is_driveable = is_driveable;
            } else if (object_index == obj_dropped_item) {
                state.item_type = item_type;
            }
            // Add more object-specific properties as needed

            ds_list_add(state_list, state);
            show_debug_message("Saved state for " + object_get_name(object_index) + " at (" + string(x) + ", " + string(y) + ")");
        }
    }
    show_debug_message("Saved state for room: " + room_get_name(room_id));
}

// Define load_room_state function
function load_room_state(room_id) {
    if (ds_map_exists(global.room_states, room_id)) {
        var state_list = ds_map_find_value(global.room_states, room_id);
        // Destroy existing savable objects
        with (all) {
			if (variable_instance_exists(id, "is_savable") && is_savable && object_index != obj_player && object_index != obj_player_tube /* add others */) {
			instance_destroy();
		    }
		}
        // Recreate objects from saved state
        for (var i = 0; i < ds_list_size(state_list); i++) {
            var state = ds_list_find_value(state_list, i);
            var inst = instance_create_layer(state.x, state.y, "Instances", state.object_index);
            if (variable_instance_exists(inst, "face")) {
                inst.face = state.direction;
            }
            // Load additional properties
            if (state.object_index == obj_icetruck || state.object_index == obj_icetruck_broken) {
                if (variable_struct_exists(state, "repair_required")) {
                    inst.repair_required = state.repair_required;
                }
                if (variable_struct_exists(state, "is_driveable")) {
                    inst.is_driveable = state.is_driveable;
                }
            } else if (state.object_index == obj_dropped_item) {
                if (variable_struct_exists(state, "item_type")) {
                    inst.item_type = state.item_type;
                }
            }
            // Add more object-specific property loading as needed
            show_debug_message("Loaded " + object_get_name(state.object_index) + " at (" + string(state.x) + ", " + string(state.y) + ")");
        }
        show_debug_message("Loaded state for room: " + room_get_name(room_id));
    } else {
        show_debug_message("No saved state found for room: " + room_get_name(room_id));
    }
}
Folder: D:\PenguinIsleProject\Penguin Isles\scripts\scr_set_depth
File: scr_set_depth.gml
// scr_set_depth.gml
function set_depth() {
    depth = -bbox_bottom;
}
Folder: D:\PenguinIsleProject\Penguin Isles\scripts\scr_skin_switch
File: scr_skin_switch.gml
function switch_skin(new_skin) {
    if (global.skin_switching) return;
    global.skin_switching = true;

    var player_x = variable_global_exists("last_player_x") ? global.last_player_x : 170;
    var player_y = variable_global_exists("last_player_y") ? global.last_player_y : 154;
    var player_face = DOWN; // Default face direction

    if (instance_exists(global.player_instance)) {
        player_x = global.player_instance.x;
        player_y = global.player_instance.y;
        // Check if the face variable exists before accessing it
        if (variable_instance_exists(global.player_instance, "face")) {
            player_face = global.player_instance.face;
        } else {
            show_debug_message("WARNING: No face variable found for current player instance. Using default.");
        }
        instance_destroy(global.player_instance);
    }

    var new_instance = noone;
    for (var i = 0; i < array_length(global.skins); i++) {
        if (global.skins[i].name == new_skin) {
            new_instance = instance_create_layer(player_x, player_y, "Instances", global.skins[i].object);
            break;
        }
    }
    if (new_instance == noone) {
        new_instance = instance_create_layer(player_x, player_y, "Instances", obj_player);
        new_skin = "player";
    }

    // Set face if the new instance has the face variable
    if (variable_instance_exists(new_instance, "face")) {
        new_instance.face = player_face;
    } else {
        show_debug_message("WARNING: New player instance does not have a face variable.");
    }

    global.player_instance = new_instance;
    global.current_skin = new_skin;
    camera_set_view_target(global.camera, global.player_instance);
    show_debug_message("Switched to skin: " + new_skin + " at (" + string(player_x) + ", " + string(player_y) + ")");

    global.skin_switching = false;
}
