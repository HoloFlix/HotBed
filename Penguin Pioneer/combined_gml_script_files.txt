Folder: D:\PenguinIsleProject\Penguin Isles\scripts\scr_camera_easing
File: scr_camera_easing.gml
/// Easing function for smooth camera transitions
function easing_out_quad(t) {
    return t * (2 - t);
}
Folder: D:\PenguinIsleProject\Penguin Isles\scripts\scr_convert_gui_to_world
File: scr_convert_gui_to_world.gml
/// scr_convert_gui_to_world()
/// Converts GUI mouse coordinates to world coordinates
var world_x = camera_get_view_x(view_camera[0]) + (mouse_x / display_get_gui_width()) * camera_get_view_width(view_camera[0]);
var world_y = camera_get_view_y(view_camera[0]) + (mouse_y / display_get_gui_height()) * camera_get_view_height(view_camera[0]);

return [world_x, world_y];

Folder: D:\PenguinIsleProject\Penguin Isles\scripts\scr_handle_collision
File: scr_handle_collision.gml
// scr_handle_collision.gml

/// @function handle_collision
/// @param axis - the axis to check ("x" or "y")
/// @param speed - the speed to check for collision
/// @returns the adjusted speed if a collision is detected, otherwise the original speed
function handle_collision(axis, speed) {
    var offset = (axis == "x") ? [speed, 0] : [0, speed];
    if (place_meeting(x + offset[0], y + offset[1], obj_wall)) {
        return 0;
    }
    return speed;
}
Folder: D:\PenguinIsleProject\Penguin Isles\scripts\scr_init_sprites
File: scr_init_sprites.gml
function init_sprites(right, up, left, down, up_right, up_left, down_right, down_left) {
    sprite[RIGHT] = right;
    sprite[UP] = up;
    sprite[LEFT] = left;
    sprite[DOWN] = down;
    sprite[UP_RIGHT] = up_right;
    sprite[UP_LEFT] = up_left;
    sprite[DOWN_RIGHT] = down_right;
    sprite[DOWN_LEFT] = down_left;
}
Folder: D:\PenguinIsleProject\Penguin Isles\scripts\scr_macros
File: scr_macros.gml
#macro RIGHT 0
#macro UP 1
#macro LEFT 2
#macro DOWN 3
#macro UP_RIGHT 4
#macro UP_LEFT 5
#macro DOWN_RIGHT 6
#macro DOWN_LEFT 7
Folder: D:\PenguinIsleProject\Penguin Isles\scripts\scr_music_function
File: scr_music_function.gml
function set_song_ingame( _song, _fadeOutCurrentSong = 0, _fadeIn = 0 )
{
	//_song = set to any song (including "noone" to stop or fade the track out)
	//_fadeOutCurrentSong = time (in frames) the current song (if playing) will take to fade out
	//_fadeIn = time (in frames) the target song (if not "noone" will take to fade in

	with ( obj_musicmanager )
	{
		targetSongAsset = _song;
		endFadeOutTime = _fadeOutCurrentSong;
		startFadeInTime = _fadeIn;
	}
}
Folder: D:\PenguinIsleProject\Penguin Isles\scripts\scr_skin_switch
File: scr_skin_switch.gml
function switch_skin(new_skin) {
    if (global.skin_switching) return; // Prevent double-switching issues
    global.skin_switching = true;

    // Ensure we have a valid position
    var player_x = 170; // Default spawn position
    var player_y = 154;
    var player_face = DOWN;

    if (instance_exists(global.player_instance)) {
        player_x = global.player_instance.x;
        player_y = global.player_instance.y;
        player_face = global.player_instance.face;
    } else if (variable_global_exists("last_player_x") && variable_global_exists("last_player_y")) {
        player_x = global.last_player_x;
        player_y = global.last_player_y;
    }

    show_debug_message("Switching skin to: " + new_skin + " at (" + string(player_x) + ", " + string(player_y) + ")");

    // Only change color, do not create a new instance
    if (new_skin == "player_color") {
        global.player_color = choose(c_red, c_green, c_blue, c_yellow, c_purple);
        show_debug_message("Color changed to: " + string(global.player_color));
        global.skin_switching = false;
        return;
    }

    // Destroy old instance *only after* creating the new one
    var old_instance = global.player_instance;

    // Create the new instance
    var new_instance;
    if (new_skin == "icetruck") {
        new_instance = instance_create_layer(player_x, player_y, "Instances", obj_player_icetruck);
    } else if (new_skin == "tube") {
        new_instance = instance_create_layer(player_x, player_y, "Instances", obj_player_tube);
    } else {
        new_instance = instance_create_layer(player_x, player_y, "Instances", obj_player);
    }

    if (new_instance != noone) {
        new_instance.face = player_face; // Keep facing direction
        global.player_instance = new_instance;
        instance_destroy(old_instance); // Destroy after switching
        show_debug_message("Successfully switched to " + new_skin);
    } else {
        show_debug_message("ERROR: Failed to create player instance for skin: " + string(new_skin));
    }

    // Ensure the camera follows the new instance
    if (instance_exists(global.player_instance)) {
        camera_set_view_target(view_camera[0], global.player_instance);
    } else {
        show_debug_message("ERROR: Camera could not follow new player instance.");
    }

    global.skin_switching = false;
}

